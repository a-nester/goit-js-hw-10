{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startBtn = document.querySelector('button');\nconst dateInput = document.querySelector('#datetime-picker');\n\nlet userSelectedDate = {};\nlet timerDays = document.querySelector('span[data-days]');\nlet timerHours = document.querySelector('span[data-hours]');\nlet timerMinutes = document.querySelector('span[data-minutes]');\nlet timerSeconds = document.querySelector('span[data-seconds]');\nlet timerId = 0;\n\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate.getTime() <= Date.now()) {\n      iziToast.error({\n          title: 'Error',\n          titleColor: 'White',\n          message: 'Please choose a date in the future',\n          messageColor: 'White',\n          backgroundColor: 'Red',\n        position: 'topRight'\n});\n      startBtn.disabled = true;\n      return;\n    }\n    startBtn.disabled = false;\n  },\n};\n\nflatpickr(dateInput, options); \n\nstartBtn.addEventListener('click', () => {\n    timerId = setInterval(showTimer, 1000);\n    startBtn.disabled = true;\n    dateInput.disabled = true;\n});\n\nfunction showTimer() {\n  const restTime = convertMs(userSelectedDate - Date.now());\n  if ((userSelectedDate - Date.now()) > 0) {\n    timerDays.textContent = addLeadingZero(restTime.days);\n    timerHours.textContent = addLeadingZero(restTime.hours);\n    timerMinutes.textContent = addLeadingZero(restTime.minutes);\n    timerSeconds.textContent = addLeadingZero(restTime.seconds);\n  } else {\n      clearInterval(timerId);\n      startBtn.disabled = false;\n      dateInput.disabled = false;\n    return;\n  }\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n"],"names":["startBtn","dateInput","userSelectedDate","timerDays","timerHours","timerMinutes","timerSeconds","timerId","options","selectedDates","iziToast","flatpickr","showTimer","restTime","convertMs","addLeadingZero","ms","days","hours","minutes","seconds","value"],"mappings":"2GAKA,MAAMA,EAAW,SAAS,cAAc,QAAQ,EAC1CC,EAAY,SAAS,cAAc,kBAAkB,EAE3D,IAAIC,EAAmB,CAAA,EACnBC,EAAY,SAAS,cAAc,iBAAiB,EACpDC,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAe,SAAS,cAAc,oBAAoB,EAC1DC,EAAe,SAAS,cAAc,oBAAoB,EAC1DC,EAAU,EAEdP,EAAS,SAAW,GAEpB,MAAMQ,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,GADAP,EAAmBO,EAAc,CAAC,EAC9BP,EAAiB,QAAO,GAAM,KAAK,IAAG,EAAI,CAC5CQ,EAAS,MAAM,CACX,MAAO,QACP,WAAY,QACZ,QAAS,qCACT,aAAc,QACd,gBAAiB,MACnB,SAAU,UAClB,CAAC,EACKV,EAAS,SAAW,GACpB,MACD,CACDA,EAAS,SAAW,EACrB,CACH,EAEAW,EAAUV,EAAWO,CAAO,EAE5BR,EAAS,iBAAiB,QAAS,IAAM,CACrCO,EAAU,YAAYK,EAAW,GAAI,EACrCZ,EAAS,SAAW,GACpBC,EAAU,SAAW,EACzB,CAAC,EAED,SAASW,GAAY,CACnB,MAAMC,EAAWC,EAAUZ,EAAmB,KAAK,IAAK,CAAA,EACxD,GAAKA,EAAmB,KAAK,IAAG,EAAM,EACpCC,EAAU,YAAcY,EAAeF,EAAS,IAAI,EACpDT,EAAW,YAAcW,EAAeF,EAAS,KAAK,EACtDR,EAAa,YAAcU,EAAeF,EAAS,OAAO,EAC1DP,EAAa,YAAcS,EAAeF,EAAS,OAAO,MACrD,CACH,cAAcN,CAAO,EACrBP,EAAS,SAAW,GACpBC,EAAU,SAAW,GACvB,MACD,CACH,CAEA,SAASa,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAeM,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC"}